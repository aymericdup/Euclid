<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Euclid</name>
    </assembly>
    <members>
        <member name="T:Euclid.Complex">
            <summary>
            Standard Complex numbers
            </summary>
        </member>
        <member name="M:Euclid.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Builds a <c>Complex</c> number
            </summary>
            <param name="real">the real part of the <c>Complex</c></param>
            <param name="imaginary">the imaginary part of the <c>Complex</c></param>
        </member>
        <member name="M:Euclid.Complex.#ctor">
            <summary>
            Builds a <c>Complex</c> number with its real and imaginary parts at zero
            </summary>
        </member>
        <member name="P:Euclid.Complex.Re">
            <summary>
            Returns the real part of the <c>Complex</c>
            </summary>
        </member>
        <member name="P:Euclid.Complex.Im">
            <summary>
            Returns the imaginary part of the <c>Complex</c>
            </summary>
        </member>
        <member name="P:Euclid.Complex.Conjugate">
            <summary>
            The conjugate number of the <c>Complex</c>
            </summary>
        </member>
        <member name="M:Euclid.Complex.Modulus">
            <summary>
            Returns the modulus of the <c>Complex</c>
            </summary>
            <returns>the square modulus of the complex</returns>
        </member>
        <member name="M:Euclid.Complex.Argument">
            <summary>
            Returns the argument of the <c>Complex</c> (between -Pi and +Pi)
            </summary>
            <returns>the argument of the <c>Complex</c></returns>
        </member>
        <member name="M:Euclid.Complex.ToString">
            <summary>
            Returns a string that represents the <c>Complex</c>
            </summary>
            <returns>a string that represents the <c>Complex</c></returns>
        </member>
        <member name="M:Euclid.Complex.ToString(System.String)">
            <summary>
            returns a string that represents the <c>Complex</c> with the specified format to the composants
            </summary>
            <param name="format">the format string</param>
            <returns>a string that represents the <c>Complex</c></returns>
        </member>
        <member name="P:Euclid.Complex.I">
            <summary>
            Returns the imaginary number i
            </summary>
        </member>
        <member name="P:Euclid.Complex.One">
            <summary>
            Returns the complex representation of the real number 1
            </summary>
        </member>
        <member name="P:Euclid.Complex.Zero">
            <summary>
            Returns a complex with both imaginary and real parts equal to zero
            </summary>
        </member>
        <member name="M:Euclid.Complex.op_Addition(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to add a complex to another complex
            </summary>
            <param name="x">the right hand side</param>
            <param name="y">the left hand side</param>
            <returns>the <c>Complex</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Complex.op_Addition(Euclid.Complex,System.Double)">
            <summary>
            Allows to add a scalar to a complex
            </summary>
            <param name="c">the complex left hand side</param>
            <param name="d">the scalar right hand side</param>
            <returns>the <c>Complex</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Complex.op_Addition(System.Double,Euclid.Complex)">
            <summary>
            Allows to add a scalar to a complex
            </summary>
            <param name="d">the scalar right hand side </param>
            <param name="c">the complex left hand side</param>
            <returns>the <c>Complex</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Complex.op_Subtraction(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to substract a complex to another complex
            </summary>
            <param name="x">the right hand side</param>
            <param name="y">the left hand side</param>
            <returns>the <c>Complex</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Complex.op_Multiply(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to multiply a complex by another complex
            </summary>
            <param name="x">the left hand side</param>
            <param name="y">the right hand side</param>
            <returns>the <c>Complex</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Complex.op_Multiply(Euclid.Complex,System.Double)">
            <summary>
            Allows to multiply a complex by a scalar
            </summary>
            <param name="c">the complex number</param>
            <param name="d">the scalar</param>
            <returns>the <c>Complex</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Complex.op_Multiply(System.Double,Euclid.Complex)">
            <summary>
            Allows to multiply a complex by a scalar
            </summary>
            <param name="d">the scalar</param>
            <param name="c">the complex number</param>
            <returns>the <c>Complex</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Complex.op_Division(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to divide a complex by another complex
            </summary>
            <param name="x">the numerator</param>
            <param name="y">the denominator</param>
            <returns>the <c>Complex</c> result of the division</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x).
            </summary>
            <param name="mean">The mean(μ) of the normal distribution</param>
            <param name="standardDeviation">The standard deviation (σ) of the normal distribution.Range: σ ≥ 0</param>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution</param>
            <param name="standardDeviation">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0</param>
            <returns>true if the parameter set is valid, false, otherwise</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.InverseCumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="mean">The mean (μ) of the normal distribution</param>
            <param name="standardDeviation">The standard deviation (σ) of the normal distribution.Range: σ ≥ 0</param>
            <param name="probability">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="mean">The mean (μ) of the normal distribution</param>
            <param name="standardDeviation">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0</param>
            <param name="x">The location at which to compute the density</param>
            <returns>the density at x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.ProbabilityDensityFunctionLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x)
            </summary>
            <param name="mean">The mean (μ) of the normal distribution</param>
            <param name="standardDeviation">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0</param>
            <param name="x">The location at which to compute the density</param>
            <returns>the log density at x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.Samples(System.Int32,System.Double,System.Double,System.Random)">
            <summary>
            Generates a sequence of samples from the normal distribution using the algorithm
            </summary>
            <param name="numberOfPoints"></param>
            <param name="mean">The mean(μ) of the normal distribution</param>
            <param name="standardDeviation">The standard deviation (σ) of the normal distribution.Range: σ ≥ 0</param>
            <param name="randomSource">The random number generator to use</param>
            <returns>a sequence of samples from the distribution</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the normal distribution using the algorithm
            </summary>
            <param name="numberOfPoints">the size of the sample to generate</param>
            <returns>a sequence of samples from the distribution</returns>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Entropy">
            <summary>
            Gets the entropy of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Maximum">
            <summary>
            Gets the maximum of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Mean">
            <summary>
            Gets or sets the mean(μ) of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Median">
            <summary>
            Gets the median of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Minimum">
            <summary>
            Gets the minimum of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Mode">
            <summary>
            Gets the mode of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Skewness">
            <summary>
            Gets the skewness of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.StandardDeviation">
            <summary>
            Gets or sets the standard deviation(σ) of the normal distribution.Range: σ ≥ 0
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Variance">
            <summary>
            Gets or sets the variance of the normal distribution
            </summary>
        </member>
        <member name="T:Euclid.Helpers.Arrays">
            <summary>
            Helper class for generic array manipulations
            </summary>
        </member>
        <member name="M:Euclid.Helpers.Arrays.Clone``1(``0[])">
            <summary>
            clones a generic array
            </summary>
            <typeparam name="T">template type</typeparam>
            <param name="data">the array of data</param>
            <returns>a shallow copy of data</returns>
        </member>
        <member name="M:Euclid.Helpers.Arrays.Clone``1(``0[0:,0:])">
            <summary>
            clones a generic 2D array
            </summary>
            <typeparam name="T">template type</typeparam>
            <param name="data">the 2d array of data</param>
            <returns>a shallow copy of data</returns>
        </member>
        <member name="M:Euclid.Helpers.Arrays.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Extract a sub array of data
            </summary>
            <typeparam name="T"> template type</typeparam>
            <param name="data">the array from which the data will be extracted</param>
            <param name="index">the starting index</param>
            <param name="length">the number of values to copy</param>
            <returns>the extracted array</returns>
        </member>
        <member name="M:Euclid.Helpers.Arrays.Apply``1(``0[],System.Func{``0,``0})">
            <summary>
            Applies a function to all the values in an arry
            </summary>
            <typeparam name="T">template type</typeparam>
            <param name="data">the array to transform</param>
            <param name="function">the function to apply to the values</param>
            <returns>an array with the transformed data</returns>
        </member>
        <member name="T:Euclid.IndexedSeries.Analytics.LinearModel">
            <summary>
            Stores the metrics of a linear regression and allows prediction
            </summary>
        </member>
        <member name="M:Euclid.IndexedSeries.Analytics.LinearModel.#ctor(System.Double,System.Double[],System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Default constructor for a linear model
            </summary>
            <param name="constant">the constant term</param>
            <param name="factors">the regression coefficients</param>
            <param name="sampleSize">the sample size</param>
            <param name="SSE">the sum of squared due to error</param>
            <param name="SSR">the sum of squared due to the regression</param>
            <param name="succeeded">the status of the regression</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Analytics.LinearModel.#ctor">
            <summary>
            Builds a linear model for a failed regression
            </summary>
        </member>
        <member name="M:Euclid.IndexedSeries.Analytics.LinearModel.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Builds a constant linear model
            </summary>
            <param name="constant">the constant</param>
            <param name="sampleSize">the sample size</param>
            <param name="SSE">the sum of squares due to error</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Analytics.LinearModel.#ctor(System.Double,System.Double[],System.Int32,System.Double,System.Double)">
            <summary> Builds a linear model for a succesful regression </summary>
            <param name="constant">the regression constant term</param>
            <param name="factors">the regression linear coefficients</param>
            <param name="sampleSize">the sample size</param>
            <param name="SSE">the sum of squares due to the error</param>
            <param name="SSR">the sum of squares due to the regression</param>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.Constant">
            <summary>
            the constant term
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.Factors">
            <summary>
            the linear terms
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.R2">
            <summary>
            the R² on the sample data
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.AdjustedR2">
            <summary>
            the adjusted R² on the sample data
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.Succeeded">
            <summary>
            specifies whether the regression succeeds
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.SSE">
            <summary>
            Sum of squares due to error
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.SSR">
            <summary>
            Sum of squares due to the regression
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Analytics.LinearModel.SST">
            <summary>
            Total sum of squares
            </summary>
        </member>
        <member name="M:Euclid.IndexedSeries.Analytics.LinearModel.ToString">
            <summary>
            Returns a string that represents the linear model
            </summary>
            <returns>a string that represents the linear model</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Analytics.LinearModel.Predict(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the estimator for the given set of data
            </summary>
            <param name="x">the set of regressors</param>
            <returns>the estimator of the regressed data</returns>
        </member>
        <member name="T:Euclid.IndexedSeries.Analytics.Regressions.RegressionStatus">
            <summary>
            Returns the status of the regression
            </summary>
        </member>
        <member name="F:Euclid.IndexedSeries.Analytics.Regressions.RegressionStatus.NotRan">
            <summary> the regression did not run </summary>
        </member>
        <member name="F:Euclid.IndexedSeries.Analytics.Regressions.RegressionStatus.Normal">
            <summary> the regression ran as expected </summary>
        </member>
        <member name="F:Euclid.IndexedSeries.Analytics.Regressions.RegressionStatus.IterationExceeded">
            <summary> the regression exceeded its max iterations </summary>
        </member>
        <member name="F:Euclid.IndexedSeries.Analytics.Regressions.RegressionStatus.BadData">
            <summary> the regression failed </summary>
        </member>
        <member name="T:Euclid.LinearAlgebra.EigenDecomposition">
            <summary>
            Class used to diagonalize symmetric matrices
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.#ctor(Euclid.Matrix)">
            <summary>
            Initiates the class
            </summary>
            <param name="matrix">the <c>Matrix</c> to decompose</param>
        </member>
        <member name="P:Euclid.LinearAlgebra.EigenDecomposition.EigenValues">
            <summary>
            Returns the <c>Complex</c> eigen values of the matrix
            </summary>
        </member>
        <member name="P:Euclid.LinearAlgebra.EigenDecomposition.DiagonalMatrix">
            <summary>
            Returns the diagonal <c>Matrix</c> which is the diagonalized form of the initial matrix
            </summary>
        </member>
        <member name="P:Euclid.LinearAlgebra.EigenDecomposition.EigenVectors">
            <summary>
            Returns a <c>Matrix</c> whose columns are the eigen vectors of the matrix
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.Solve">
            <summary>
            Tridiagonalizes the matrix and then diagonalize it in the complex space
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.SymmetricTridiagonalize">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.SymmetricDiagonalize">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
        </member>
        <member name="M:Euclid.Matrix.#ctor">
            <summary>
            Builds a 2x2 <c>Matrix</c>
            </summary>
        </member>
        <member name="M:Euclid.Matrix.#ctor(System.Int32)">
            <summary>
            Builds a square matrix full of zeros
            </summary>
            <param name="dimension">the number of rows or columns</param>
        </member>
        <member name="M:Euclid.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Builds a rectangular matrix full of zeros
            </summary>
            <param name="rows">the number of rows</param>
            <param name="cols">the number of columns</param>
        </member>
        <member name="M:Euclid.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Builds a rectangular matrix filled with the specified value
            </summary>
            <param name="rows">the number of rows</param>
            <param name="cols">the number of columns</param>
            <param name="value">the value for all the fields of the matrix</param>
        </member>
        <member name="P:Euclid.Matrix.Columns">
            <summary>
            Returns the number of columns of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Rows">
            <summary>
            Returns the number of rows of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.IsSquare">
            <summary>
            Specifies whether the <c>Matrix</c> is square
            </summary>
        </member>
        <member name="P:Euclid.Matrix.IsSymetric">
            <summary>
            Specifies whether the <c>Matrix</c> is square and symmetric
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Size">
            <summary>
            Returns the number of values in the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Clone">
            <summary>
            Returns a deep copy of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Trace">
            <summary>
            Returns the trace of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Norm1">
            <summary>
            Return the sum of the absolute values
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Norm2">
            <summary>
            Returns the square root of the sum of squares
            </summary>
        </member>
        <member name="P:Euclid.Matrix.NormSup">
            <summary>
            Returns the largest value of the <c>Matrix</c> in absolute value
            </summary>
        </member>
        <member name="P:Euclid.Matrix.SumOfSquares">
            <summary>
            Returns the sum of the squared values
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Sum">
            <summary>
            Returns the sum of the values
            </summary>
        </member>
        <member name="M:Euclid.Matrix.MakeLU">
            <summary>
            Evaluates the LU decomposition of the matrix and stores the results in the private attributes _L and _U.
            </summary>
        </member>
        <member name="M:Euclid.Matrix.SubMatrix(System.Int32,System.Int32)">
            <summary>
            Returns the matrix from which one row and one column have been excluded (indexed by row and col).
            </summary>
            <param name="row">The index of the row to exclude</param>
            <param name="col">The index of the column to exclude</param>
            <returns>The matrix without the speficied line and the column</returns>
        </member>
        <member name="M:Euclid.Matrix.SetCol(Euclid.Matrix,System.Int32)">
            <summary>
            Replaces the column of index k with the input matrix v.
            </summary>
            <param name="v">Column replacing the old one</param>
            <param name="k">Index of the column to replace</param>
        </member>
        <member name="M:Euclid.Matrix.SolveWith(Euclid.Matrix)">
            <summary>
            Solves the equation : A*x=v, where A is the Matrix, x the unknown, v the input argument.
            </summary>
            <param name="v">The right hand side of the equation</param>
            <returns>The solution x of A*x=v</returns>
        </member>
        <member name="M:Euclid.Matrix.Add(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Performs a matrix addition, after going through dimension compatibility verifications.
            </summary>
            <param name="m1">First matrix</param>
            <param name="m2">Second matrix</param>
            <returns>The sum of m1 and m2</returns>
        </member>
        <member name="M:Euclid.Matrix.Power(Euclid.Matrix,System.Int32)">
            <summary>
            Evaluates the matrix raised to a power specified by pow.
            </summary>
            <param name="pow">The power we want to raise the matrix to</param>
            <returns>The matrix, raised to the power pow</returns>
        </member>
        <member name="M:Euclid.Matrix.ZeroMatrix(System.Int32,System.Int32)">
            <summary>
            Returns a matrix filled with zeroes.
            </summary>
            <param name="iRows">The number of rows of the output</param>
            <param name="iCols">The number of columns of the output</param>
            <returns>A matrix filled with zeroes</returns>
        </member>
        <member name="M:Euclid.Matrix.IdentityMatrix(System.Int32,System.Int32)">
            <summary>
            Returns a matrix with ones on the diagonal of ones starting at the (0,0) element.
            When the matrix is squared, this is the identity matrix.
            </summary>
            <param name="iRows">The number of rows of the output</param>
            <param name="iCols">The number of columns of the output</param>
            <returns>A  matrix with ones on the diagonal of ones starting at the (0,0) element</returns>
        </member>
        <member name="M:Euclid.Matrix.Hadamard(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Returns the Hadamard product
            </summary>
            <param name="m1">the left hand side</param>
            <param name="m2">the right hand side</param>
            <returns>a <c>Matrix</c> containing the Hadamard product</returns>
        </member>
        <member name="M:Euclid.Matrix.ToString">
            <summary>
            Returns a string that represents the matrix
            </summary>
            <returns>a string that represents the matrix</returns>
        </member>
        <member name="M:Euclid.Polynomial.#ctor(System.Int32)">
            <summary>
            Builds a polynomial with no terms except the highest
            </summary>
            <param name="degree">the polynomial's degree</param>
        </member>
        <member name="M:Euclid.Polynomial.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            Builds a polynomial through the terms
            </summary>
            <param name="terms">the terms of the polynomial</param>
        </member>
        <member name="M:Euclid.Polynomial.Normalize">
            <summary>
            Divides all the terms by the leading term so the polynomial has one(1) as leading term
            </summary>
        </member>
        <member name="M:Euclid.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluates the polynomial's value for a given value
            </summary>
            <param name="x">The value for which the polynomial is evaluated</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Polynomial.ComplexRoots">
            <summary>
            Computes the roots of polynomial p via Weierstrass iteration.
            </summary>
            <returns>the complex roots of the <c>Polynomial</c></returns>
        </member>
        <member name="P:Euclid.Polynomial.Item(System.Int32)">
            <summary>
            Accesses the terms of the polynomial
            </summary>
            <param name="i">the index</param>
            <returns>a term of the polynomial</returns>
        </member>
        <member name="P:Euclid.Polynomial.Degree">
            <summary>
            Returns the polynomial's degree
            </summary>
        </member>
        <member name="P:Euclid.Polynomial.Derivative">
            <summary>
            Returns the derivative polynomial (one degree less)
            </summary>
        </member>
        <member name="P:Euclid.Polynomial.Clone">
            <summary>
            Returns a deep copy of the polynomial
            </summary>
        </member>
        <member name="M:Euclid.Polynomial.op_Multiply(Euclid.Polynomial,Euclid.Polynomial)">
            <summary> multiplies two polynomials </summary>
            <param name="p1">the left hand side</param>
            <param name="p2">the right hand side</param>
            <returns>the <c>Polynomial</c> result of the polynomial</returns>
        </member>
        <member name="M:Euclid.Polynomial.Add(Euclid.Polynomial,Euclid.Polynomial)">
            <summary>
            Performs a polynomial addition
            </summary>
            <param name="p1">First matrix</param>
            <param name="p2">Second matrix</param>
            <returns>The sum of m1 and m2</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Addition(Euclid.Polynomial,System.Double)">
            <summary>
            Adds a polynomial to a scalar
            </summary>
            <param name="p">the polynomial left hand side</param>
            <param name="c">the scalar right hand side</param>
            <returns>the <c>Polynomial</c> result of the adition</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Addition(System.Double,Euclid.Polynomial)">
            <summary>
            Adds a polynomial to a scalar
            </summary>
            <param name="c">the scalar left hand side</param>
            <param name="p">the polynomial right hand side</param>
            <returns>the <c>Polynomial</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Addition(Euclid.Polynomial,Euclid.Polynomial)">
            <summary>
            Adds two polynomials
            </summary>
            <param name="p1">the left hand side</param>
            <param name="p2">the right hand side</param>
            <returns>the <c>Polynomial</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Subtraction(Euclid.Polynomial,Euclid.Polynomial)">
            <summary>
            Substracts one polynomial to another
            </summary>
            <param name="p1">the left hand side</param>
            <param name="p2">the right hand side</param>
            <returns>the <c>Polynomial</c> result of the substraction </returns>
        </member>
        <member name="M:Euclid.Polynomial.Power(Euclid.Polynomial,System.Int32)">
            <summary>
            Evaluates the Polynomial raised to a power specified by pow.
            </summary>
            <param name="pow">The power we want to raise the Polynomial to</param>
            <returns>The Polynomial, raised to the power pow</returns>
        </member>
        <member name="T:Euclid.Solvers.SolverStatus">
            <summary>
            The status of a solver
            </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.NotRan">
            <summary> The solver did not run </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.Normal">
            <summary> The solver ran as expected </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.IterationExceeded">
            <summary> The solver exceeded its maximum iterations </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.BadFunction">
            <summary> The function is not adapted to the solver's requirements </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.Diverged">
            <summary> The solver diverged </summary>
        </member>
        <member name="T:Euclid.Fn">
             This class contains physical constants and special functions not found
             in the System.Math class.
             Like the System.Math class this class is final and cannot be
             subclassed.
             All physical constants are in cgs units.
             NOTE: These special functions do not necessarily use the fastest
             or most accurate algorithms.
            
             @version $Revision: 1.8 $, $Date: 2005/09/12 09:52:34 $
        </member>
        <member name="F:Euclid.Fn.BOLTZMAN">
            <summary>
            Boltzman Constant. Units erg/deg(K) 
            </summary>
        </member>
        <member name="F:Euclid.Fn.ECHARGE">
            <summary>
            Elementary Charge. Units statcoulomb 
            </summary>
        </member>
        <member name="F:Euclid.Fn.EMASS">
            <summary>
            Electron Mass. Units g 
            </summary>
        </member>
        <member name="F:Euclid.Fn.PMASS">
            <summary>
            Proton Mass. Units g 
            </summary>
        </member>
        <member name="F:Euclid.Fn.GRAV">
            <summary>
            Gravitational Constant. Units dyne-cm^2/g^2
            </summary>
        </member>
        <member name="F:Euclid.Fn.PLANCK">
            <summary>
            Planck constant. Units erg-sec 
            </summary>
        </member>
        <member name="F:Euclid.Fn.LIGHTSPEED">
            <summary>
            Speed of Light in a Vacuum. Units cm/sec 
            </summary>
        </member>
        <member name="F:Euclid.Fn.STEFANBOLTZ">
            <summary>
            Stefan-Boltzman Constant. Units erg/cm^2-sec-deg^4 
            </summary>
        </member>
        <member name="F:Euclid.Fn.AVOGADRO">
            <summary>
            Avogadro Number. Units  1/mol 
            </summary>
        </member>
        <member name="F:Euclid.Fn.GASCONSTANT">
            <summary>
            Gas Constant. Units erg/deg-mol 
            </summary>
        </member>
        <member name="F:Euclid.Fn.GRAVACC">
            <summary>
            Gravitational Acceleration at the Earths surface. Units cm/sec^2 
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARMASS">
            <summary>
            Solar Mass. Units g 
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARRADIUS">
            <summary>
            Solar Radius. Units cm
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARLUM">
            <summary>
            Solar Luminosity. Units erg/sec
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARFLUX">
            <summary>
            Solar Flux. Units erg/cm^2-sec
            </summary>
        </member>
        <member name="F:Euclid.Fn.AU">
            <summary>
            Astronomical Unit (radius of the Earth's orbit). Units cm
            </summary>
        </member>
        <member name="M:Euclid.Fn.log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.acosh(System.Double)">
            <summary>
            Returns the hyperbolic arc cosine of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.asinh(System.Double)">
            <summary>
            Returns the hyperbolic arc sine of the specified number.
            </summary>
            <param name="xx"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.atanh(System.Double)">
            <summary>
            Returns the hyperbolic arc tangent of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.j0(System.Double)">
            <summary>
            Returns the Bessel function of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.j1(System.Double)">
            <summary>
            Returns the Bessel function of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.jn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.y0(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.y1(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.yn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.fac(System.Double)">
            <summary>
            Returns the factorial of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.Factorial(System.Int32)">
            <summary>
            Returns the factorial of the specified number.
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.gamma(System.Double)">
            <summary>
            Returns the gamma function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.stirf(System.Double)">
            <summary>
            Return the gamma function computed by Stirling's formula.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.igamc(System.Double,System.Double)">
            <summary>
            Returns the complemented incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.igam(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.chisq(System.Double,System.Double)">
             Returns the area under the left hand tail (from 0 to x)
             of the Chi square probability density function with
             v degrees of freedom.
            
            <summary>
            Returns the chi-square function (left hand tail).
            </summary>
            <param name="df">degrees of freedom</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.chisqc(System.Double,System.Double)">
             Returns the area under the right hand tail (from x to
             infinity) of the Chi square probability density function
             with v degrees of freedom:
            
            <summary>
            Returns the chi-square function (right hand tail).
            </summary>
            <param name="df">degrees of freedom</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.poisson(System.Int32,System.Double)">
            <summary>
            Returns the sum of the first k terms of the Poisson distribution.
            </summary>
            <param name="k">number of terms</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.poissonc(System.Int32,System.Double)">
            <summary>
            Returns the sum of the terms k+1 to infinity of the Poisson distribution.
            </summary>
            <param name="k">start</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.normal(System.Double)">
            <summary>
            Returns the area under the Gaussian probability density function, integrated from minus infinity to a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.erfc(System.Double)">
            <summary>
            Returns the complementary error function of the specified number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.erf(System.Double)">
            <summary>
            Returns the error function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.polevl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.p1evl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N with assumtion that coef[N] = 1.0
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>		
        </member>
        <member name="M:Euclid.Fn.lgamma(System.Double)">
            <summary>
            Returns the natural logarithm of gamma function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.ibeta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the incomplete beta function evaluated from zero to xx.
            </summary>
            <param name="aa"></param>
            <param name="bb"></param>
            <param name="xx"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.incbcf(System.Double,System.Double,System.Double)">
            <summary>
            Returns the continued fraction expansion #1 for incomplete beta integral.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.incbd(System.Double,System.Double,System.Double)">
            <summary>
            Returns the continued fraction expansion #2 for incomplete beta integral.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.pseries(System.Double,System.Double,System.Double)">
            <summary>
            Returns the power series for incomplete beta integral. Use when b*x is small and x not too close to 1.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
    </members>
</doc>
